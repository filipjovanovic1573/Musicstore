@model Musicstore.Models.Album

@{
    ViewBag.Title = "EditAlbum";
}

@using(Html.BeginForm("EditAlbum", "AdminPanel", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" })) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.AlbumName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AlbumName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AlbumName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Thumbnail, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-top: 2px;" })
            <div class="col-md-10">
                <input type="file" id="file" name="file" />
                @Html.ValidationMessageFor(model => model.Thumbnail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2", @style = "padding-top: 3px;" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "checkbox" } })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublisherId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PublisherId, new SelectList(Model.Publishers, "Id", "Name", Model.Publishers.Select(s => s.Id)), "Select publisher", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PublisherId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PerformerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PerformerId, new SelectList(Model.Performers, "Id", "Name", Model.Performers.Select(s => s.Id)), "Select performer", new { @class = "form-control", @onchange = "javascript:FilterSongs(this.value)" })
                @Html.ValidationMessageFor(model => model.PerformerId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Songs", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("filteredsongs", new MultiSelectList(Model.SongsSL, "Id", "Name", Model.SongsSL.Select(s => s.Id)), new { @class = "form-control", size = "10" })
            </div>
        </div>
        @Html.HiddenFor(model => model.DateCreated)
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<script>
    $('body').on('mousedown', 'option', function (e) {
        e.preventDefault();
        $(this).prop('selected', $(this).prop('selected') ? false : true);
        return false;
    });

    $('.datepicker').datepicker({
        changeYear: true,
        changeMonth: true,
        yearRange: '1950:2050'
    }).datepicker("option", "dateFormat", "dd.mm.yy");

    function FilterSongs(_id) {
        var procemessage = "<option value='0'> Please wait... </option>";
        if (_id == "") {
            $('#filteredsongs').html("<option value='0'> No performer selected </option>").show();
        }
        else {
            $("#filteredsongs").html(procemessage).show();
            var url = "/AdminPanel/FilterSongs/";
            $.ajax({
                url: url,
                data: { id: _id },
                cache: false,
                type: "POST",
                success: function (data) {
                    var markup = "";
                    for (var x = 0; x < data.length; x++) {
                        markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                    }
                    $("#filteredsongs").html(markup).show();
                },
                error: function (reponse) {
                    alert("error : " + reponse.responseText);
                }
            });
        }
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
